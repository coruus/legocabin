// Code generated by protoc-gen-go.
// source: Client.proto
// DO NOT EDIT!

/*
Package LogCabin_Protocol_Client is a generated protocol buffer package.

It is generated from these files:
	Client.proto

It has these top-level messages:
	Error
	ExactlyOnceRPCInfo
	VerifyRecipient
	OpenSession
	Server
	GetConfiguration
	SetConfiguration
	TreeCondition
	ReadOnlyTree
	ReadWriteTree
	GetServerInfo
	GetServerStats
	AdvanceStateMachineVersion
	StateMachineCommand
	StateMachineQuery
*/
package LogCabin_Protocol_Client

import proto "github.com/golang/protobuf/proto"
import math "math"
import LogCabin_Protocol "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// *
// Identifies which RPC is being executed.
type OpCode int32

const (
	OpCode_STATE_MACHINE_QUERY   OpCode = 1
	OpCode_STATE_MACHINE_COMMAND OpCode = 2
	OpCode_VERIFY_RECIPIENT      OpCode = 3
	OpCode_GET_CONFIGURATION     OpCode = 4
	OpCode_SET_CONFIGURATION     OpCode = 5
	OpCode_GET_SERVER_STATS      OpCode = 6
	OpCode_GET_SERVER_INFO       OpCode = 7
)

var OpCode_name = map[int32]string{
	1: "STATE_MACHINE_QUERY",
	2: "STATE_MACHINE_COMMAND",
	3: "VERIFY_RECIPIENT",
	4: "GET_CONFIGURATION",
	5: "SET_CONFIGURATION",
	6: "GET_SERVER_STATS",
	7: "GET_SERVER_INFO",
}
var OpCode_value = map[string]int32{
	"STATE_MACHINE_QUERY":   1,
	"STATE_MACHINE_COMMAND": 2,
	"VERIFY_RECIPIENT":      3,
	"GET_CONFIGURATION":     4,
	"SET_CONFIGURATION":     5,
	"GET_SERVER_STATS":      6,
	"GET_SERVER_INFO":       7,
}

func (x OpCode) Enum() *OpCode {
	p := new(OpCode)
	*p = x
	return p
}
func (x OpCode) String() string {
	return proto.EnumName(OpCode_name, int32(x))
}
func (x *OpCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OpCode_value, data, "OpCode")
	if err != nil {
		return err
	}
	*x = OpCode(value)
	return nil
}

// *
// The status code returned from Tree operations.
// For now, this should be the exact same as Client::Status and Tree::Status.
type Status int32

const (
	// *
	// This must be the first value in the enum and is never assigned
	// explicitly. If new values are added, old code will see them as set
	// and equal to this value (though they will still serialize to the
	// correct value).
	Status_UNKNOWN           Status = 10
	Status_OK                Status = 0
	Status_INVALID_ARGUMENT  Status = 1
	Status_LOOKUP_ERROR      Status = 2
	Status_TYPE_ERROR        Status = 3
	Status_CONDITION_NOT_MET Status = 4
	// *
	// This is only used internally in the client library; it is never sent
	// over the network.
	Status_TIMEOUT Status = 5
	// *
	// This session is no longer valid. Its state has been discarded on the
	// server. The client should treat this as a fatal error.
	Status_SESSION_EXPIRED Status = 6
)

var Status_name = map[int32]string{
	10: "UNKNOWN",
	0:  "OK",
	1:  "INVALID_ARGUMENT",
	2:  "LOOKUP_ERROR",
	3:  "TYPE_ERROR",
	4:  "CONDITION_NOT_MET",
	5:  "TIMEOUT",
	6:  "SESSION_EXPIRED",
}
var Status_value = map[string]int32{
	"UNKNOWN":           10,
	"OK":                0,
	"INVALID_ARGUMENT":  1,
	"LOOKUP_ERROR":      2,
	"TYPE_ERROR":        3,
	"CONDITION_NOT_MET": 4,
	"TIMEOUT":           5,
	"SESSION_EXPIRED":   6,
}

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}
func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (x *Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Status_value, data, "Status")
	if err != nil {
		return err
	}
	*x = Status(value)
	return nil
}

type Error_Code int32

const (
	// *
	// This must be the first value in the enum and is never assigned
	// explicitly. If new values are added, old code will see them as set
	// and equal to this value (though they will still serialize to the
	// correct value).
	Error_UNKNOWN Error_Code = 0
	// *
	// The server is not the current cluster leader. The client should look
	// elsewhere for the cluster leader. The server MAY provide a hint as
	// to who the leader is (see leader_hint field).
	Error_NOT_LEADER Error_Code = 1
)

var Error_Code_name = map[int32]string{
	0: "UNKNOWN",
	1: "NOT_LEADER",
}
var Error_Code_value = map[string]int32{
	"UNKNOWN":    0,
	"NOT_LEADER": 1,
}

func (x Error_Code) Enum() *Error_Code {
	p := new(Error_Code)
	*p = x
	return p
}
func (x Error_Code) String() string {
	return proto.EnumName(Error_Code_name, int32(x))
}
func (x *Error_Code) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Error_Code_value, data, "Error_Code")
	if err != nil {
		return err
	}
	*x = Error_Code(value)
	return nil
}

// *
// The type of "service-specific error" replies that this service returns.
type Error struct {
	ErrorCode *Error_Code `protobuf:"varint,1,opt,name=error_code,enum=LogCabin.Protocol.Client.Error_Code" json:"error_code,omitempty"`
	// *
	// If error_code is NOT_LEADER and this field is set, the client should try
	// the server found at this address, which is likely to be the current
	// leader.
	LeaderHint       *string `protobuf:"bytes,2,opt,name=leader_hint" json:"leader_hint,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}

func (m *Error) GetErrorCode() Error_Code {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return Error_UNKNOWN
}

func (m *Error) GetLeaderHint() string {
	if m != nil && m.LeaderHint != nil {
		return *m.LeaderHint
	}
	return ""
}

// *
// This is included in some RPCs to prevent processing of duplicated RPCs.
type ExactlyOnceRPCInfo struct {
	// *
	// A session ID returned from the OpenSession RPC.
	// Valid client IDs will always be strictly greater than 0.
	ClientId *uint64 `protobuf:"varint,1,req,name=client_id" json:"client_id,omitempty"`
	// *
	// The lowest numbered RPC for which the client has not yet received a
	// response. The server may discard all copies of responses for RPCs with
	// smaller numbers.
	FirstOutstandingRpc *uint64 `protobuf:"varint,2,req,name=first_outstanding_rpc" json:"first_outstanding_rpc,omitempty"`
	// *
	// A strictly increasing sequence number for the RPC.
	RpcNumber        *uint64 `protobuf:"varint,3,req,name=rpc_number" json:"rpc_number,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExactlyOnceRPCInfo) Reset()         { *m = ExactlyOnceRPCInfo{} }
func (m *ExactlyOnceRPCInfo) String() string { return proto.CompactTextString(m) }
func (*ExactlyOnceRPCInfo) ProtoMessage()    {}

func (m *ExactlyOnceRPCInfo) GetClientId() uint64 {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return 0
}

func (m *ExactlyOnceRPCInfo) GetFirstOutstandingRpc() uint64 {
	if m != nil && m.FirstOutstandingRpc != nil {
		return *m.FirstOutstandingRpc
	}
	return 0
}

func (m *ExactlyOnceRPCInfo) GetRpcNumber() uint64 {
	if m != nil && m.RpcNumber != nil {
		return *m.RpcNumber
	}
	return 0
}

// *
// VerifyRecipient RPC: Make sure we're talking to the intended recipient (to
// avoid disastrous confusion). This is called automatically by
// Client::SessionManager when creating new sessions.
type VerifyRecipient struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *VerifyRecipient) Reset()         { *m = VerifyRecipient{} }
func (m *VerifyRecipient) String() string { return proto.CompactTextString(m) }
func (*VerifyRecipient) ProtoMessage()    {}

type VerifyRecipient_Request struct {
	// *
	// The cluster UUID that the recipient must match, if any.
	ClusterUuid *string `protobuf:"bytes,1,opt,name=cluster_uuid" json:"cluster_uuid,omitempty"`
	// *
	// The server ID of the recipient, if any.
	ServerId         *uint64 `protobuf:"varint,2,opt,name=server_id" json:"server_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VerifyRecipient_Request) Reset()         { *m = VerifyRecipient_Request{} }
func (m *VerifyRecipient_Request) String() string { return proto.CompactTextString(m) }
func (*VerifyRecipient_Request) ProtoMessage()    {}

func (m *VerifyRecipient_Request) GetClusterUuid() string {
	if m != nil && m.ClusterUuid != nil {
		return *m.ClusterUuid
	}
	return ""
}

func (m *VerifyRecipient_Request) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

type VerifyRecipient_Response struct {
	// *
	// The recipient's cluster UUID.
	ClusterUuid *string `protobuf:"bytes,1,opt,name=cluster_uuid" json:"cluster_uuid,omitempty"`
	// *
	// The recipient's server ID.
	ServerId *uint64 `protobuf:"varint,2,opt,name=server_id" json:"server_id,omitempty"`
	// *
	// Set to true if everything matched successfully.
	Ok *bool `protobuf:"varint,3,opt,name=ok" json:"ok,omitempty"`
	// *
	// If there was an error, a message describing why.
	Error            *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VerifyRecipient_Response) Reset()         { *m = VerifyRecipient_Response{} }
func (m *VerifyRecipient_Response) String() string { return proto.CompactTextString(m) }
func (*VerifyRecipient_Response) ProtoMessage()    {}

func (m *VerifyRecipient_Response) GetClusterUuid() string {
	if m != nil && m.ClusterUuid != nil {
		return *m.ClusterUuid
	}
	return ""
}

func (m *VerifyRecipient_Response) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *VerifyRecipient_Response) GetOk() bool {
	if m != nil && m.Ok != nil {
		return *m.Ok
	}
	return false
}

func (m *VerifyRecipient_Response) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

// *
// OpenSession state machine command: Open a new session with the cluster.
// Sessions are necessary for some RPCs to provide exactly-once semantics.
type OpenSession struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *OpenSession) Reset()         { *m = OpenSession{} }
func (m *OpenSession) String() string { return proto.CompactTextString(m) }
func (*OpenSession) ProtoMessage()    {}

type OpenSession_Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *OpenSession_Request) Reset()         { *m = OpenSession_Request{} }
func (m *OpenSession_Request) String() string { return proto.CompactTextString(m) }
func (*OpenSession_Request) ProtoMessage()    {}

type OpenSession_Response struct {
	// *
	// The ID assigned to the client.
	ClientId         *uint64 `protobuf:"varint,1,req,name=client_id" json:"client_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OpenSession_Response) Reset()         { *m = OpenSession_Response{} }
func (m *OpenSession_Response) String() string { return proto.CompactTextString(m) }
func (*OpenSession_Response) ProtoMessage()    {}

func (m *OpenSession_Response) GetClientId() uint64 {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return 0
}

// *
// A server in a configuration. Used in the GetConfiguration and
// SetConfiguration RPCs.
type Server struct {
	// *
	// The ID of the server.
	ServerId *uint64 `protobuf:"varint,1,req,name=server_id" json:"server_id,omitempty"`
	// *
	// The network address(es) of the server (comma-delimited).
	Addresses        *string `protobuf:"bytes,2,req,name=addresses" json:"addresses,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}

func (m *Server) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *Server) GetAddresses() string {
	if m != nil && m.Addresses != nil {
		return *m.Addresses
	}
	return ""
}

// *
// GetConfiguration RPC: Get the current cluster configuration.
// This will only return stable configurations; the client will be asked to
// retry otherwise.
type GetConfiguration struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetConfiguration) Reset()         { *m = GetConfiguration{} }
func (m *GetConfiguration) String() string { return proto.CompactTextString(m) }
func (*GetConfiguration) ProtoMessage()    {}

type GetConfiguration_Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetConfiguration_Request) Reset()         { *m = GetConfiguration_Request{} }
func (m *GetConfiguration_Request) String() string { return proto.CompactTextString(m) }
func (*GetConfiguration_Request) ProtoMessage()    {}

type GetConfiguration_Response struct {
	// *
	// Identifies the configuration. Pass this to SetConfiguration later.
	Id *uint64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// *
	// The list of servers in the configuration.
	Servers          []*Server `protobuf:"bytes,2,rep,name=servers" json:"servers,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *GetConfiguration_Response) Reset()         { *m = GetConfiguration_Response{} }
func (m *GetConfiguration_Response) String() string { return proto.CompactTextString(m) }
func (*GetConfiguration_Response) ProtoMessage()    {}

func (m *GetConfiguration_Response) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GetConfiguration_Response) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

// *
// SetConfiguration RPC: Change the cluster's configuration.
type SetConfiguration struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetConfiguration) Reset()         { *m = SetConfiguration{} }
func (m *SetConfiguration) String() string { return proto.CompactTextString(m) }
func (*SetConfiguration) ProtoMessage()    {}

type SetConfiguration_Request struct {
	// *
	// The ID of the cluster's current configuration.
	OldId *uint64 `protobuf:"varint,1,req,name=old_id" json:"old_id,omitempty"`
	// *
	// The list of servers in the new configuration.
	NewServers       []*Server `protobuf:"bytes,2,rep,name=new_servers" json:"new_servers,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *SetConfiguration_Request) Reset()         { *m = SetConfiguration_Request{} }
func (m *SetConfiguration_Request) String() string { return proto.CompactTextString(m) }
func (*SetConfiguration_Request) ProtoMessage()    {}

func (m *SetConfiguration_Request) GetOldId() uint64 {
	if m != nil && m.OldId != nil {
		return *m.OldId
	}
	return 0
}

func (m *SetConfiguration_Request) GetNewServers() []*Server {
	if m != nil {
		return m.NewServers
	}
	return nil
}

type SetConfiguration_Response struct {
	// *
	// Set if the operation succeeded.
	Ok *SetConfiguration_Response_OK `protobuf:"bytes,1,opt,name=ok" json:"ok,omitempty"`
	// *
	// Set if the supplied 'old_id' is no longer current.
	// Call GetConfiguration, re-apply your changes, and try again.
	ConfigurationChanged *SetConfiguration_Response_ConfigurationChanged `protobuf:"bytes,2,opt,name=configuration_changed" json:"configuration_changed,omitempty"`
	// *
	// Set if the reconfiguration was aborted because some servers are
	// unavailable or too slow.
	ConfigurationBad *SetConfiguration_Response_ConfigurationBad `protobuf:"bytes,3,opt,name=configuration_bad" json:"configuration_bad,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *SetConfiguration_Response) Reset()         { *m = SetConfiguration_Response{} }
func (m *SetConfiguration_Response) String() string { return proto.CompactTextString(m) }
func (*SetConfiguration_Response) ProtoMessage()    {}

func (m *SetConfiguration_Response) GetOk() *SetConfiguration_Response_OK {
	if m != nil {
		return m.Ok
	}
	return nil
}

func (m *SetConfiguration_Response) GetConfigurationChanged() *SetConfiguration_Response_ConfigurationChanged {
	if m != nil {
		return m.ConfigurationChanged
	}
	return nil
}

func (m *SetConfiguration_Response) GetConfigurationBad() *SetConfiguration_Response_ConfigurationBad {
	if m != nil {
		return m.ConfigurationBad
	}
	return nil
}

// The following are mutually exclusive.
type SetConfiguration_Response_OK struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetConfiguration_Response_OK) Reset()         { *m = SetConfiguration_Response_OK{} }
func (m *SetConfiguration_Response_OK) String() string { return proto.CompactTextString(m) }
func (*SetConfiguration_Response_OK) ProtoMessage()    {}

type SetConfiguration_Response_ConfigurationChanged struct {
	Error            *string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetConfiguration_Response_ConfigurationChanged) Reset() {
	*m = SetConfiguration_Response_ConfigurationChanged{}
}
func (m *SetConfiguration_Response_ConfigurationChanged) String() string {
	return proto.CompactTextString(m)
}
func (*SetConfiguration_Response_ConfigurationChanged) ProtoMessage() {}

func (m *SetConfiguration_Response_ConfigurationChanged) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

type SetConfiguration_Response_ConfigurationBad struct {
	// *
	// The servers that were unavailable to join the cluster.
	BadServers       []*Server `protobuf:"bytes,1,rep,name=bad_servers" json:"bad_servers,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *SetConfiguration_Response_ConfigurationBad) Reset() {
	*m = SetConfiguration_Response_ConfigurationBad{}
}
func (m *SetConfiguration_Response_ConfigurationBad) String() string {
	return proto.CompactTextString(m)
}
func (*SetConfiguration_Response_ConfigurationBad) ProtoMessage() {}

func (m *SetConfiguration_Response_ConfigurationBad) GetBadServers() []*Server {
	if m != nil {
		return m.BadServers
	}
	return nil
}

// *
// A predicate on Tree operations.
// If set, operations will return CONDITION_NOT_MET and have no effect unless
// the file at 'path' has the contents 'contents'.
type TreeCondition struct {
	// *
	// The absolute path to the file that must have the contents specified in
	// 'contents'.
	Path *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	// *
	// The contents that the file specified by 'path' must have for the
	// operation to succeed.
	Contents         []byte `protobuf:"bytes,2,req,name=contents" json:"contents,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TreeCondition) Reset()         { *m = TreeCondition{} }
func (m *TreeCondition) String() string { return proto.CompactTextString(m) }
func (*TreeCondition) ProtoMessage()    {}

func (m *TreeCondition) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *TreeCondition) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

// *
// Read-only Tree state machine query: retrieves information from the
// hierarchical key-value store.
type ReadOnlyTree struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReadOnlyTree) Reset()         { *m = ReadOnlyTree{} }
func (m *ReadOnlyTree) String() string { return proto.CompactTextString(m) }
func (*ReadOnlyTree) ProtoMessage()    {}

type ReadOnlyTree_Request struct {
	Condition        *TreeCondition                      `protobuf:"bytes,11,opt,name=condition" json:"condition,omitempty"`
	ListDirectory    *ReadOnlyTree_Request_ListDirectory `protobuf:"bytes,2,opt,name=list_directory" json:"list_directory,omitempty"`
	Read             *ReadOnlyTree_Request_Read          `protobuf:"bytes,5,opt,name=read" json:"read,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *ReadOnlyTree_Request) Reset()         { *m = ReadOnlyTree_Request{} }
func (m *ReadOnlyTree_Request) String() string { return proto.CompactTextString(m) }
func (*ReadOnlyTree_Request) ProtoMessage()    {}

func (m *ReadOnlyTree_Request) GetCondition() *TreeCondition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *ReadOnlyTree_Request) GetListDirectory() *ReadOnlyTree_Request_ListDirectory {
	if m != nil {
		return m.ListDirectory
	}
	return nil
}

func (m *ReadOnlyTree_Request) GetRead() *ReadOnlyTree_Request_Read {
	if m != nil {
		return m.Read
	}
	return nil
}

// The following are mutually exclusive.
type ReadOnlyTree_Request_ListDirectory struct {
	Path             *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadOnlyTree_Request_ListDirectory) Reset()         { *m = ReadOnlyTree_Request_ListDirectory{} }
func (m *ReadOnlyTree_Request_ListDirectory) String() string { return proto.CompactTextString(m) }
func (*ReadOnlyTree_Request_ListDirectory) ProtoMessage()    {}

func (m *ReadOnlyTree_Request_ListDirectory) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

type ReadOnlyTree_Request_Read struct {
	Path             *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadOnlyTree_Request_Read) Reset()         { *m = ReadOnlyTree_Request_Read{} }
func (m *ReadOnlyTree_Request_Read) String() string { return proto.CompactTextString(m) }
func (*ReadOnlyTree_Request_Read) ProtoMessage()    {}

func (m *ReadOnlyTree_Request_Read) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

type ReadOnlyTree_Response struct {
	Status *Status `protobuf:"varint,1,opt,name=status,enum=LogCabin.Protocol.Client.Status" json:"status,omitempty"`
	// The following are mutually exclusive.
	Error            *string                              `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	ListDirectory    *ReadOnlyTree_Response_ListDirectory `protobuf:"bytes,3,opt,name=list_directory" json:"list_directory,omitempty"`
	Read             *ReadOnlyTree_Response_Read          `protobuf:"bytes,4,opt,name=read" json:"read,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *ReadOnlyTree_Response) Reset()         { *m = ReadOnlyTree_Response{} }
func (m *ReadOnlyTree_Response) String() string { return proto.CompactTextString(m) }
func (*ReadOnlyTree_Response) ProtoMessage()    {}

func (m *ReadOnlyTree_Response) GetStatus() Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Status_UNKNOWN
}

func (m *ReadOnlyTree_Response) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *ReadOnlyTree_Response) GetListDirectory() *ReadOnlyTree_Response_ListDirectory {
	if m != nil {
		return m.ListDirectory
	}
	return nil
}

func (m *ReadOnlyTree_Response) GetRead() *ReadOnlyTree_Response_Read {
	if m != nil {
		return m.Read
	}
	return nil
}

type ReadOnlyTree_Response_ListDirectory struct {
	Child            []string `protobuf:"bytes,1,rep,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ReadOnlyTree_Response_ListDirectory) Reset()         { *m = ReadOnlyTree_Response_ListDirectory{} }
func (m *ReadOnlyTree_Response_ListDirectory) String() string { return proto.CompactTextString(m) }
func (*ReadOnlyTree_Response_ListDirectory) ProtoMessage()    {}

func (m *ReadOnlyTree_Response_ListDirectory) GetChild() []string {
	if m != nil {
		return m.Child
	}
	return nil
}

type ReadOnlyTree_Response_Read struct {
	Contents         []byte `protobuf:"bytes,1,req,name=contents" json:"contents,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReadOnlyTree_Response_Read) Reset()         { *m = ReadOnlyTree_Response_Read{} }
func (m *ReadOnlyTree_Response_Read) String() string { return proto.CompactTextString(m) }
func (*ReadOnlyTree_Response_Read) ProtoMessage()    {}

func (m *ReadOnlyTree_Response_Read) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

// *
// Read-write Tree state machine command: modifies the hierarchical key-value
// store and retrieves information from it.
type ReadWriteTree struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReadWriteTree) Reset()         { *m = ReadWriteTree{} }
func (m *ReadWriteTree) String() string { return proto.CompactTextString(m) }
func (*ReadWriteTree) ProtoMessage()    {}

type ReadWriteTree_Request struct {
	// / See ExactlyOnceRPCInfo.
	ExactlyOnce      *ExactlyOnceRPCInfo                    `protobuf:"bytes,10,req,name=exactly_once" json:"exactly_once,omitempty"`
	Condition        *TreeCondition                         `protobuf:"bytes,11,opt,name=condition" json:"condition,omitempty"`
	MakeDirectory    *ReadWriteTree_Request_MakeDirectory   `protobuf:"bytes,1,opt,name=make_directory" json:"make_directory,omitempty"`
	RemoveDirectory  *ReadWriteTree_Request_RemoveDirectory `protobuf:"bytes,3,opt,name=remove_directory" json:"remove_directory,omitempty"`
	Write            *ReadWriteTree_Request_Write           `protobuf:"bytes,4,opt,name=write" json:"write,omitempty"`
	RemoveFile       *ReadWriteTree_Request_RemoveFile      `protobuf:"bytes,6,opt,name=remove_file" json:"remove_file,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *ReadWriteTree_Request) Reset()         { *m = ReadWriteTree_Request{} }
func (m *ReadWriteTree_Request) String() string { return proto.CompactTextString(m) }
func (*ReadWriteTree_Request) ProtoMessage()    {}

func (m *ReadWriteTree_Request) GetExactlyOnce() *ExactlyOnceRPCInfo {
	if m != nil {
		return m.ExactlyOnce
	}
	return nil
}

func (m *ReadWriteTree_Request) GetCondition() *TreeCondition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *ReadWriteTree_Request) GetMakeDirectory() *ReadWriteTree_Request_MakeDirectory {
	if m != nil {
		return m.MakeDirectory
	}
	return nil
}

func (m *ReadWriteTree_Request) GetRemoveDirectory() *ReadWriteTree_Request_RemoveDirectory {
	if m != nil {
		return m.RemoveDirectory
	}
	return nil
}

func (m *ReadWriteTree_Request) GetWrite() *ReadWriteTree_Request_Write {
	if m != nil {
		return m.Write
	}
	return nil
}

func (m *ReadWriteTree_Request) GetRemoveFile() *ReadWriteTree_Request_RemoveFile {
	if m != nil {
		return m.RemoveFile
	}
	return nil
}

// The following are mutually exclusive.
type ReadWriteTree_Request_MakeDirectory struct {
	Path             *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadWriteTree_Request_MakeDirectory) Reset()         { *m = ReadWriteTree_Request_MakeDirectory{} }
func (m *ReadWriteTree_Request_MakeDirectory) String() string { return proto.CompactTextString(m) }
func (*ReadWriteTree_Request_MakeDirectory) ProtoMessage()    {}

func (m *ReadWriteTree_Request_MakeDirectory) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

type ReadWriteTree_Request_RemoveDirectory struct {
	Path             *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadWriteTree_Request_RemoveDirectory) Reset()         { *m = ReadWriteTree_Request_RemoveDirectory{} }
func (m *ReadWriteTree_Request_RemoveDirectory) String() string { return proto.CompactTextString(m) }
func (*ReadWriteTree_Request_RemoveDirectory) ProtoMessage()    {}

func (m *ReadWriteTree_Request_RemoveDirectory) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

type ReadWriteTree_Request_Write struct {
	Path             *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	Contents         []byte  `protobuf:"bytes,2,req,name=contents" json:"contents,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadWriteTree_Request_Write) Reset()         { *m = ReadWriteTree_Request_Write{} }
func (m *ReadWriteTree_Request_Write) String() string { return proto.CompactTextString(m) }
func (*ReadWriteTree_Request_Write) ProtoMessage()    {}

func (m *ReadWriteTree_Request_Write) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *ReadWriteTree_Request_Write) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type ReadWriteTree_Request_RemoveFile struct {
	Path             *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadWriteTree_Request_RemoveFile) Reset()         { *m = ReadWriteTree_Request_RemoveFile{} }
func (m *ReadWriteTree_Request_RemoveFile) String() string { return proto.CompactTextString(m) }
func (*ReadWriteTree_Request_RemoveFile) ProtoMessage()    {}

func (m *ReadWriteTree_Request_RemoveFile) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

type ReadWriteTree_Response struct {
	Status *Status `protobuf:"varint,1,opt,name=status,enum=LogCabin.Protocol.Client.Status" json:"status,omitempty"`
	// The following are mutually exclusive.
	Error            *string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadWriteTree_Response) Reset()         { *m = ReadWriteTree_Response{} }
func (m *ReadWriteTree_Response) String() string { return proto.CompactTextString(m) }
func (*ReadWriteTree_Response) ProtoMessage()    {}

func (m *ReadWriteTree_Response) GetStatus() Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Status_UNKNOWN
}

func (m *ReadWriteTree_Response) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

// *
// GetServerInfo RPC: Retrieve basic information from the given server used for
// reconfiguration.
type GetServerInfo struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetServerInfo) Reset()         { *m = GetServerInfo{} }
func (m *GetServerInfo) String() string { return proto.CompactTextString(m) }
func (*GetServerInfo) ProtoMessage()    {}

type GetServerInfo_Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetServerInfo_Request) Reset()         { *m = GetServerInfo_Request{} }
func (m *GetServerInfo_Request) String() string { return proto.CompactTextString(m) }
func (*GetServerInfo_Request) ProtoMessage()    {}

type GetServerInfo_Response struct {
	// *
	// Server ID, listening addresses.
	ServerInfo       *Server `protobuf:"bytes,1,req,name=server_info" json:"server_info,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetServerInfo_Response) Reset()         { *m = GetServerInfo_Response{} }
func (m *GetServerInfo_Response) String() string { return proto.CompactTextString(m) }
func (*GetServerInfo_Response) ProtoMessage()    {}

func (m *GetServerInfo_Response) GetServerInfo() *Server {
	if m != nil {
		return m.ServerInfo
	}
	return nil
}

// *
// GetServerStats RPC: Retrieve statistics from the given server, which are
// useful for diagnostics.
type GetServerStats struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetServerStats) Reset()         { *m = GetServerStats{} }
func (m *GetServerStats) String() string { return proto.CompactTextString(m) }
func (*GetServerStats) ProtoMessage()    {}

type GetServerStats_Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetServerStats_Request) Reset()         { *m = GetServerStats_Request{} }
func (m *GetServerStats_Request) String() string { return proto.CompactTextString(m) }
func (*GetServerStats_Request) ProtoMessage()    {}

type GetServerStats_Response struct {
	// *
	// Metrics, statistics, state and other such information.
	ServerStats      *LogCabin_Protocol.ServerStats `protobuf:"bytes,1,req,name=server_stats" json:"server_stats,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *GetServerStats_Response) Reset()         { *m = GetServerStats_Response{} }
func (m *GetServerStats_Response) String() string { return proto.CompactTextString(m) }
func (*GetServerStats_Response) ProtoMessage()    {}

func (m *GetServerStats_Response) GetServerStats() *LogCabin_Protocol.ServerStats {
	if m != nil {
		return m.ServerStats
	}
	return nil
}

// *
// AdvanceStateMachineVersion state machine command: changes state machine
// behavior to the given version, if and only if the requested_version is
// greater than the state machine's current version. This is currently only
// used internally by the Raft servers. It is not currently sent by the client
// library, rather it is appended by the Raft leader automatically as needed.
type AdvanceStateMachineVersion struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *AdvanceStateMachineVersion) Reset()         { *m = AdvanceStateMachineVersion{} }
func (m *AdvanceStateMachineVersion) String() string { return proto.CompactTextString(m) }
func (*AdvanceStateMachineVersion) ProtoMessage()    {}

type AdvanceStateMachineVersion_Request struct {
	RequestedVersion *uint32 `protobuf:"varint,1,req,name=requested_version" json:"requested_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AdvanceStateMachineVersion_Request) Reset()         { *m = AdvanceStateMachineVersion_Request{} }
func (m *AdvanceStateMachineVersion_Request) String() string { return proto.CompactTextString(m) }
func (*AdvanceStateMachineVersion_Request) ProtoMessage()    {}

func (m *AdvanceStateMachineVersion_Request) GetRequestedVersion() uint32 {
	if m != nil && m.RequestedVersion != nil {
		return *m.RequestedVersion
	}
	return 0
}

type AdvanceStateMachineVersion_Response struct {
	// *
	// The version of the state machine behavior that the replicated state
	// machine is running after applying this command (this will be at
	// least the requested version, but may be higher if the state machine
	// was already running a higher version).
	RunningVersion   *uint32 `protobuf:"varint,1,req,name=running_version" json:"running_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AdvanceStateMachineVersion_Response) Reset()         { *m = AdvanceStateMachineVersion_Response{} }
func (m *AdvanceStateMachineVersion_Response) String() string { return proto.CompactTextString(m) }
func (*AdvanceStateMachineVersion_Response) ProtoMessage()    {}

func (m *AdvanceStateMachineVersion_Response) GetRunningVersion() uint32 {
	if m != nil && m.RunningVersion != nil {
		return *m.RunningVersion
	}
	return 0
}

// *
// StateMachineCommand RPC from clients that is processed by the replicated
// state machine.
type StateMachineCommand struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StateMachineCommand) Reset()         { *m = StateMachineCommand{} }
func (m *StateMachineCommand) String() string { return proto.CompactTextString(m) }
func (*StateMachineCommand) ProtoMessage()    {}

// *
// This is what the state machine takes in from the replicated log.
// These are read-write: they may modify the state machine state.
type StateMachineCommand_Request struct {
	// The following are mutually exclusive.
	OpenSession      *OpenSession_Request                `protobuf:"bytes,1,opt,name=open_session" json:"open_session,omitempty"`
	Tree             *ReadWriteTree_Request              `protobuf:"bytes,2,opt,name=tree" json:"tree,omitempty"`
	AdvanceVersion   *AdvanceStateMachineVersion_Request `protobuf:"bytes,3,opt,name=advance_version" json:"advance_version,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *StateMachineCommand_Request) Reset()         { *m = StateMachineCommand_Request{} }
func (m *StateMachineCommand_Request) String() string { return proto.CompactTextString(m) }
func (*StateMachineCommand_Request) ProtoMessage()    {}

func (m *StateMachineCommand_Request) GetOpenSession() *OpenSession_Request {
	if m != nil {
		return m.OpenSession
	}
	return nil
}

func (m *StateMachineCommand_Request) GetTree() *ReadWriteTree_Request {
	if m != nil {
		return m.Tree
	}
	return nil
}

func (m *StateMachineCommand_Request) GetAdvanceVersion() *AdvanceStateMachineVersion_Request {
	if m != nil {
		return m.AdvanceVersion
	}
	return nil
}

// *
// This is what the state machine outputs for read-write commands from the log.
type StateMachineCommand_Response struct {
	// The following are mutually exclusive.
	OpenSession      *OpenSession_Response                `protobuf:"bytes,1,opt,name=open_session" json:"open_session,omitempty"`
	Tree             *ReadWriteTree_Response              `protobuf:"bytes,2,opt,name=tree" json:"tree,omitempty"`
	AdvanceVersion   *AdvanceStateMachineVersion_Response `protobuf:"bytes,3,opt,name=advance_version" json:"advance_version,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *StateMachineCommand_Response) Reset()         { *m = StateMachineCommand_Response{} }
func (m *StateMachineCommand_Response) String() string { return proto.CompactTextString(m) }
func (*StateMachineCommand_Response) ProtoMessage()    {}

func (m *StateMachineCommand_Response) GetOpenSession() *OpenSession_Response {
	if m != nil {
		return m.OpenSession
	}
	return nil
}

func (m *StateMachineCommand_Response) GetTree() *ReadWriteTree_Response {
	if m != nil {
		return m.Tree
	}
	return nil
}

func (m *StateMachineCommand_Response) GetAdvanceVersion() *AdvanceStateMachineVersion_Response {
	if m != nil {
		return m.AdvanceVersion
	}
	return nil
}

// *
// StateMachineQuery RPC from clients that is processed by the replicated state
// machine.
type StateMachineQuery struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StateMachineQuery) Reset()         { *m = StateMachineQuery{} }
func (m *StateMachineQuery) String() string { return proto.CompactTextString(m) }
func (*StateMachineQuery) ProtoMessage()    {}

// *
// These are read-only queries that (in the current implementation) are not
// written to the replicated log (but behave as if they were from the
// client's perspective). These are read-only: they may not modify the
// state machine state.
type StateMachineQuery_Request struct {
	// The following are mutually exclusive.
	Tree             *ReadOnlyTree_Request `protobuf:"bytes,1,opt,name=tree" json:"tree,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *StateMachineQuery_Request) Reset()         { *m = StateMachineQuery_Request{} }
func (m *StateMachineQuery_Request) String() string { return proto.CompactTextString(m) }
func (*StateMachineQuery_Request) ProtoMessage()    {}

func (m *StateMachineQuery_Request) GetTree() *ReadOnlyTree_Request {
	if m != nil {
		return m.Tree
	}
	return nil
}

// *
// This is what the state machine outputs for read-only queries.
type StateMachineQuery_Response struct {
	// The following are mutually exclusive.
	Tree             *ReadOnlyTree_Response `protobuf:"bytes,1,opt,name=tree" json:"tree,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *StateMachineQuery_Response) Reset()         { *m = StateMachineQuery_Response{} }
func (m *StateMachineQuery_Response) String() string { return proto.CompactTextString(m) }
func (*StateMachineQuery_Response) ProtoMessage()    {}

func (m *StateMachineQuery_Response) GetTree() *ReadOnlyTree_Response {
	if m != nil {
		return m.Tree
	}
	return nil
}

func init() {
	proto.RegisterEnum("LogCabin.Protocol.Client.OpCode", OpCode_name, OpCode_value)
	proto.RegisterEnum("LogCabin.Protocol.Client.Status", Status_name, Status_value)
	proto.RegisterEnum("LogCabin.Protocol.Client.Error_Code", Error_Code_name, Error_Code_value)
}
